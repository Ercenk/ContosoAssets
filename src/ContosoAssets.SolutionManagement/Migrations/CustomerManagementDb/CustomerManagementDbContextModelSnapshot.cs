// <auto-generated />
using System;
using ContosoAssets.SolutionManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContosoAssets.SolutionManagement.Migrations.CustomerManagementDb
{
    [DbContext(typeof(CustomerManagementDbContext))]
    partial class CustomerManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.AppUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<string>("Operation");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Usages");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerName");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.CustomerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<int?>("CustomerRegion");

                    b.Property<string>("ExternalUserName");

                    b.Property<string>("FullName");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerUsers");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Sku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<double>("MonthlyCost");

                    b.Property<int>("MonthlyLimit");

                    b.Property<string>("Name");

                    b.Property<int>("SalesChannel");

                    b.HasKey("Id");

                    b.ToTable("Skus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("885e900e-1a22-49ac-b526-e4154a8a5bbf"),
                            Description = "None",
                            MonthlyCost = 0.0,
                            MonthlyLimit = 2147483647,
                            Name = "None",
                            SalesChannel = 2
                        },
                        new
                        {
                            Id = new Guid("b74519a4-368f-4d93-bd8f-143584da399e"),
                            Description = "Silver",
                            MonthlyCost = 9.9900000000000002,
                            MonthlyLimit = 2,
                            Name = "Silver",
                            SalesChannel = 0
                        },
                        new
                        {
                            Id = new Guid("b0f164a7-a4ad-44b9-9062-7ea51a8a002a"),
                            Description = "Gold",
                            MonthlyCost = 19.989999999999998,
                            MonthlyLimit = 5,
                            Name = "Gold",
                            SalesChannel = 0
                        },
                        new
                        {
                            Id = new Guid("758759d4-8f48-42cd-9309-c4b0005061b2"),
                            Description = "Platinum",
                            MonthlyCost = 29.989999999999998,
                            MonthlyLimit = 7,
                            Name = "Platinum",
                            SalesChannel = 0
                        },
                        new
                        {
                            Id = new Guid("ccbb97b7-835d-4532-b4d2-03b7bfca8ce3"),
                            Description = "Silver",
                            MonthlyCost = 9.9900000000000002,
                            MonthlyLimit = 2,
                            Name = "Silver",
                            SalesChannel = 1
                        },
                        new
                        {
                            Id = new Guid("84e2bd3c-5405-4568-acad-28a84ff98db1"),
                            Description = "Gold",
                            MonthlyCost = 19.989999999999998,
                            MonthlyLimit = 5,
                            Name = "Gold",
                            SalesChannel = 1
                        },
                        new
                        {
                            Id = new Guid("21084065-506d-43df-8553-595513c2883b"),
                            Description = "Platinum",
                            MonthlyCost = 29.989999999999998,
                            MonthlyLimit = 7,
                            Name = "Platinum",
                            SalesChannel = 1
                        });
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTimeOffset>("LastOperationTime");

                    b.Property<string>("OfferId");

                    b.Property<string>("PlanId");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("SkuId");

                    b.Property<int>("State");

                    b.Property<string>("SubscriptionName");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SkuId");

                    b.ToTable("CustomerSubscriptions");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.AppUse", b =>
                {
                    b.HasOne("ContosoAssets.SolutionManagement.Data.CustomerUser", "CustomerUser")
                        .WithMany("Usages")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.CustomerUser", b =>
                {
                    b.HasOne("ContosoAssets.SolutionManagement.Data.Customer", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Subscription", b =>
                {
                    b.HasOne("ContosoAssets.SolutionManagement.Data.Customer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContosoAssets.SolutionManagement.Data.Sku", "Sku")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
