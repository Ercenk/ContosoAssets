// <auto-generated />
using System;
using ContosoAssets.SolutionManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContosoAssets.SolutionManagement.Migrations.CustomerManagementDb
{
    [DbContext(typeof(CustomerManagementDbContext))]
    [Migration("20190614150607_InitializeCustomerManagement")]
    partial class InitializeCustomerManagement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.AppUse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company");

                    b.Property<Guid>("CustomerUserId");

                    b.Property<string>("Operation");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Usages");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomerName");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.CustomerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<int?>("CustomerRegion");

                    b.Property<string>("ExternalUserName");

                    b.Property<string>("FullName");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerUsers");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Sku", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<double>("MonthlyCost");

                    b.Property<int>("MonthlyLimit");

                    b.Property<string>("Name");

                    b.Property<int>("SalesChannel");

                    b.HasKey("Id");

                    b.ToTable("Skus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d627c84-a37f-4bc7-be35-7c7e006481d1"),
                            Description = "None",
                            MonthlyCost = 0.0,
                            MonthlyLimit = 2147483647,
                            Name = "None",
                            SalesChannel = 2
                        },
                        new
                        {
                            Id = new Guid("77229b05-7d60-4202-85a6-db5a1f94c1c8"),
                            Description = "Silver",
                            MonthlyCost = 9.9900000000000002,
                            MonthlyLimit = 2,
                            Name = "Silver",
                            SalesChannel = 0
                        },
                        new
                        {
                            Id = new Guid("8b542189-d625-4982-8372-75ebaf1bb164"),
                            Description = "Gold",
                            MonthlyCost = 19.989999999999998,
                            MonthlyLimit = 5,
                            Name = "Gold",
                            SalesChannel = 0
                        },
                        new
                        {
                            Id = new Guid("7e7144bf-607b-48e3-a380-0983abb8037f"),
                            Description = "Platinum",
                            MonthlyCost = 29.989999999999998,
                            MonthlyLimit = 7,
                            Name = "Platinum",
                            SalesChannel = 0
                        },
                        new
                        {
                            Id = new Guid("a08be29f-4ff1-42ca-b195-f4f8bafb8ef4"),
                            Description = "Silver",
                            MonthlyCost = 9.9900000000000002,
                            MonthlyLimit = 2,
                            Name = "Silver",
                            SalesChannel = 1
                        },
                        new
                        {
                            Id = new Guid("c22c5542-41a4-4346-8956-bb087a760ffb"),
                            Description = "Gold",
                            MonthlyCost = 19.989999999999998,
                            MonthlyLimit = 5,
                            Name = "Gold",
                            SalesChannel = 1
                        },
                        new
                        {
                            Id = new Guid("c92186b9-0341-4868-8c5a-9c38a358cc56"),
                            Description = "Platinum",
                            MonthlyCost = 29.989999999999998,
                            MonthlyLimit = 7,
                            Name = "Platinum",
                            SalesChannel = 1
                        });
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedTime");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTimeOffset>("LastOperationTime");

                    b.Property<string>("OfferId");

                    b.Property<string>("PlanId");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("SkuId");

                    b.Property<int>("State");

                    b.Property<string>("SubscriptionName");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SkuId");

                    b.ToTable("CustomerSubscriptions");
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.AppUse", b =>
                {
                    b.HasOne("ContosoAssets.SolutionManagement.Data.CustomerUser", "CustomerUser")
                        .WithMany("Usages")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.CustomerUser", b =>
                {
                    b.HasOne("ContosoAssets.SolutionManagement.Data.Customer", "Customer")
                        .WithMany("Users")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContosoAssets.SolutionManagement.Data.Subscription", b =>
                {
                    b.HasOne("ContosoAssets.SolutionManagement.Data.Customer", "Customer")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ContosoAssets.SolutionManagement.Data.Sku", "Sku")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
